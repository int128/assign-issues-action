import * as core from '@actions/core'
import { Octokit, Repository } from './types'
import { PullRequestReviewGroup } from './group'

export const formatDashboard = (groups: PullRequestReviewGroup[]): string => {
  const lines: string[] = []
  lines.push(`\
This is automatically generated by assign-issues-action.

## Pull request groups
`)
  if (groups.length === 0) {
    lines.push(`Nothing.`)
  }
  for (const group of groups) {
    lines.push(`\
### ${group.labels.join(', ')}
These pull requests are reviewed by ${group.reviewers.map((r) => `@${r}`).join(' ')}.

`)
    for (const pull of group.pulls) {
      lines.push(`- #${pull.number}`)
    }
  }
  return lines.join('\n')
}

export const createOrUpdateDashboard = async (octokit: Octokit, repo: Repository, body: string) => {
  const keyLabel = 'pull-request-review-dashboard'
  const { data: issues } = await octokit.rest.issues.listForRepo({
    ...repo,
    labels: keyLabel,
    per_page: 1,
    sort: 'created',
    direction: 'asc',
  })
  const issue = issues.pop()
  if (issue) {
    core.info(`Updating the issue #${issue.number}`)
    await octokit.rest.issues.update({
      ...repo,
      issue_number: issue.number,
      title: 'Pull Request Review Dashboard',
      body,
    })
    return
  }
  core.info(`Creating an issue`)
  await octokit.rest.issues.create({
    ...repo,
    title: 'Pull Request Review Dashboard',
    labels: [keyLabel],
    body,
  })
}
